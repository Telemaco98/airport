THEORY ProofList IS
_f(1) & _f(2) & _f(13) & _f(14) & _f(96) & WellDefinedness_has_airplane.4,(_f(32) & _f(87) & _f(88) & _f(91) => _f(93));
_f(1) & _f(2) & _f(13) & _f(14) & _f(96) & WellDefinedness_has_airplane.3,(_f(32) & _f(87) & _f(88) & _f(91) => _f(94));
_f(1) & _f(2) & _f(13) & _f(14) & _f(96) & WellDefinedness_has_airplane.2,(_f(32) & _f(86) & _f(91) => _f(93));
_f(1) & _f(2) & _f(13) & _f(14) & _f(96) & WellDefinedness_has_airplane.1,(_f(32) & _f(86) & _f(91) => _f(92));
_f(1) & _f(2) & _f(13) & _f(14) & _f(51) & WellDefinedness_remove.4,(_f(57) & _f(60) & _f(89) & _f(91) => _f(93));
_f(1) & _f(2) & _f(13) & _f(14) & _f(51) & WellDefinedness_remove.3,(_f(57) & _f(60) & _f(89) & _f(91) => _f(95));
_f(1) & _f(2) & _f(13) & _f(14) & _f(51) & WellDefinedness_remove.2,(_f(57) & _f(60) & _f(91) => _f(93));
_f(1) & _f(2) & _f(13) & _f(14) & _f(51) & WellDefinedness_remove.1,(_f(57) & _f(60) & _f(91) => _f(94));
_f(1) & _f(2) & _f(13) & _f(14) & _f(15) & WellDefinedness_add_plane.13,(_f(25) & _f(16) & _f(17) & _f(18) & _f(21) & _f(20) & _f(40) => _f(41));
_f(1) & _f(2) & _f(13) & _f(14) & _f(15) & WellDefinedness_add_plane.12,(_f(25) & _f(16) & _f(17) & _f(18) & _f(21) & _f(20) & _f(37) & _f(33) => _f(42));
_f(1) & _f(2) & _f(13) & _f(14) & _f(15) & WellDefinedness_add_plane.11,(_f(25) & _f(16) & _f(17) & _f(18) & _f(21) & _f(20) & _f(37) & _f(31) => _f(38));
_f(1) & _f(2) & _f(13) & _f(14) & _f(15) & WellDefinedness_add_plane.10,(_f(25) & _f(16) & _f(17) & _f(18) & _f(21) & _f(19) & _f(40) => _f(41));
_f(1) & _f(2) & _f(13) & _f(14) & _f(15) & WellDefinedness_add_plane.9,(_f(25) & _f(16) & _f(17) & _f(18) & _f(21) & _f(19) & _f(37) & _f(33) => _f(39));
_f(1) & _f(2) & _f(13) & _f(14) & _f(15) & WellDefinedness_add_plane.8,(_f(25) & _f(16) & _f(17) & _f(18) & _f(21) & _f(19) & _f(37) & _f(31) => _f(38));
_f(1) & _f(2) & _f(13) & _f(14) & _f(15) & WellDefinedness_add_plane.7,(_f(25) & _f(16) & _f(17) & _f(18) & _f(35) => _f(36));
_f(1) & _f(2) & _f(13) & _f(14) & _f(15) & WellDefinedness_add_plane.6,(_f(25) & _f(30) & _f(33) => _f(34));
_f(1) & _f(2) & _f(13) & _f(14) & _f(15) & WellDefinedness_add_plane.5,(_f(25) & _f(30) & _f(31) => _f(32));
_f(1) & _f(2) & _f(13) & _f(14) & _f(15) & WellDefinedness_add_plane.4,(_f(25) & _f(32) & _f(87) & _f(88) & _f(91) => _f(93));
_f(1) & _f(2) & _f(13) & _f(14) & _f(15) & WellDefinedness_add_plane.3,(_f(25) & _f(32) & _f(87) & _f(88) & _f(91) => _f(94));
_f(1) & _f(2) & _f(13) & _f(14) & _f(15) & WellDefinedness_add_plane.2,(_f(25) & _f(32) & _f(86) & _f(91) => _f(93));
_f(1) & _f(2) & _f(13) & _f(14) & _f(15) & WellDefinedness_add_plane.1,(_f(25) & _f(32) & _f(86) & _f(91) => _f(92));
_f(1) & _f(2) & _f(13) & _f(14) & _f(70) & has_airplane.12,(_f(27) & _f(28) & _f(16) & _f(71) & _f(72) & _f(24) & _f(73) & _f(45) => _f(77));
_f(1) & _f(2) & _f(13) & _f(14) & _f(70) & has_airplane.11,(_f(27) & _f(28) & _f(16) & _f(71) & _f(72) & _f(24) & _f(59) & _f(45) => _f(76));
_f(1) & _f(2) & _f(13) & _f(14) & _f(70) & has_airplane.10,(_f(27) & _f(28) & _f(16) & _f(71) & _f(72) & _f(21) & _f(43) => _f(44));
_f(1) & _f(2) & _f(13) & _f(14) & _f(70) & has_airplane.9,(_f(27) & _f(28) & _f(16) & _f(71) & _f(72) & _f(21) & _f(20) & _f(40) => _f(41));
_f(1) & _f(2) & _f(13) & _f(14) & _f(70) & has_airplane.8,(_f(27) & _f(28) & _f(16) & _f(71) & _f(72) & _f(21) & _f(20) & _f(37) & _f(74) => _f(75));
_f(1) & _f(2) & _f(13) & _f(14) & _f(70) & has_airplane.7,(_f(27) & _f(28) & _f(16) & _f(71) & _f(72) & _f(21) & _f(20) & _f(37) & _f(31) => _f(38));
_f(1) & _f(2) & _f(13) & _f(14) & _f(70) & has_airplane.6,(_f(27) & _f(28) & _f(16) & _f(71) & _f(72) & _f(21) & _f(19) & _f(40) => _f(41));
_f(1) & _f(2) & _f(13) & _f(14) & _f(70) & has_airplane.5,(_f(27) & _f(28) & _f(16) & _f(71) & _f(72) & _f(21) & _f(19) & _f(37) & _f(74) => _f(39));
_f(1) & _f(2) & _f(13) & _f(14) & _f(70) & has_airplane.4,(_f(27) & _f(28) & _f(16) & _f(71) & _f(72) & _f(21) & _f(19) & _f(37) & _f(31) => _f(38));
_f(1) & _f(2) & _f(13) & _f(14) & _f(70) & has_airplane.3,(_f(27) & _f(28) & _f(16) & _f(71) & _f(72) & _f(35) => _f(36));
_f(1) & _f(2) & _f(13) & _f(14) & _f(70) & has_airplane.2,(_f(27) & _f(28) & _f(30) & _f(74) => _f(34));
_f(1) & _f(2) & _f(13) & _f(14) & _f(70) & has_airplane.1,(_f(27) & _f(28) & _f(30) & _f(31) => _f(32));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.13,(_f(27) & _f(28) & _f(59) & _f(58) & _f(4) & _f(11) => _f(68));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.12,(_f(27) & _f(28) & _f(59) & _f(57) & _f(52) & _f(56) & _f(45) & _f(11) => _f(67));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.11,(_f(27) & _f(28) & _f(59) & _f(57) & _f(52) & _f(56) & _f(45) & _f(9) => _f(66));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.10,(_f(27) & _f(28) & _f(59) & _f(57) & _f(52) & _f(56) & _f(45) & _f(7) => _f(65));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.9,(_f(27) & _f(28) & _f(59) & _f(57) & _f(52) & _f(56) & _f(45) & _f(5) => _f(64));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.8,(_f(27) & _f(28) & _f(59) & _f(57) & _f(52) & _f(55) & _f(43) => _f(63));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.7,(_f(27) & _f(28) & _f(59) & _f(57) & _f(52) & _f(55) & _f(54) & _f(40) => _f(41));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.6,(_f(27) & _f(28) & _f(59) & _f(57) & _f(52) & _f(55) & _f(54) & _f(37) => _f(61));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.5,(_f(27) & _f(28) & _f(59) & _f(57) & _f(52) & _f(55) & _f(53) & _f(43) => _f(62));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.4,(_f(27) & _f(28) & _f(59) & _f(57) & _f(52) & _f(55) & _f(53) & _f(40) => _f(41));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.3,(_f(27) & _f(28) & _f(59) & _f(57) & _f(52) & _f(55) & _f(53) & _f(37) => _f(61));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.2,(_f(27) & _f(28) & _f(59) & _f(57) & _f(52) & _f(35) => _f(36));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.1,(_f(27) & _f(28) & _f(59) & _f(57) & _f(30) => _f(60));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.16,(_f(27) & _f(28) & _f(29) & _f(26) & _f(4) => _f(50));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.15,(_f(27) & _f(28) & _f(29) & _f(25) & _f(16) & _f(17) & _f(18) & _f(24) & _f(23) & _f(45) => _f(50));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.14,(_f(27) & _f(28) & _f(29) & _f(25) & _f(16) & _f(17) & _f(18) & _f(24) & _f(22) & _f(45) & _f(9) => _f(49));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.13,(_f(27) & _f(28) & _f(29) & _f(25) & _f(16) & _f(17) & _f(18) & _f(24) & _f(22) & _f(45) & _f(7) => _f(48));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.12,(_f(27) & _f(28) & _f(29) & _f(25) & _f(16) & _f(17) & _f(18) & _f(24) & _f(22) & _f(45) & _f(5) => _f(47));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.11,(_f(27) & _f(28) & _f(29) & _f(25) & _f(16) & _f(17) & _f(18) & _f(24) & _f(22) & _f(45) => _f(46));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.10,(_f(27) & _f(28) & _f(29) & _f(25) & _f(16) & _f(17) & _f(18) & _f(21) & _f(43) => _f(44));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.9,(_f(27) & _f(28) & _f(29) & _f(25) & _f(16) & _f(17) & _f(18) & _f(21) & _f(20) & _f(40) => _f(41));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.8,(_f(27) & _f(28) & _f(29) & _f(25) & _f(16) & _f(17) & _f(18) & _f(21) & _f(20) & _f(37) & _f(33) => _f(42));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.7,(_f(27) & _f(28) & _f(29) & _f(25) & _f(16) & _f(17) & _f(18) & _f(21) & _f(20) & _f(37) & _f(31) => _f(38));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.6,(_f(27) & _f(28) & _f(29) & _f(25) & _f(16) & _f(17) & _f(18) & _f(21) & _f(19) & _f(40) => _f(41));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.5,(_f(27) & _f(28) & _f(29) & _f(25) & _f(16) & _f(17) & _f(18) & _f(21) & _f(19) & _f(37) & _f(33) => _f(39));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.4,(_f(27) & _f(28) & _f(29) & _f(25) & _f(16) & _f(17) & _f(18) & _f(21) & _f(19) & _f(37) & _f(31) => _f(38));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.3,(_f(27) & _f(28) & _f(29) & _f(25) & _f(16) & _f(17) & _f(18) & _f(35) => _f(36));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.2,(_f(27) & _f(28) & _f(29) & _f(25) & _f(30) & _f(33) => _f(34));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.1,(_f(27) & _f(28) & _f(29) & _f(25) & _f(30) & _f(31) => _f(32));
_f(1) & _f(2) & Initialisation.4,(_f(4) & _f(11) => _f(12));
_f(1) & _f(2) & Initialisation.3,(_f(4) & _f(9) => _f(10));
_f(1) & _f(2) & Initialisation.2,(_f(4) & _f(7) => _f(8));
_f(1) & _f(2) & Initialisation.1,(_f(4) & _f(5) => _f(6))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
AIRPLANE: FIN(INTEGER) & not(AIRPLANE = {}) & ((1..6)*{STATUS}): FIN(NATURAL*{STATUS}) & not(((1..6)*{STATUS}) = {}) & ((1..2)*{OCCUPATION}): FIN(NATURAL*{OCCUPATION}) & not(((1..2)*{OCCUPATION}) = {}) & ((sz_gates) : ((NAT-{0}))) & (1 +1 <= sz_gates) & ((sz_tracks) : ((NAT-{0}))) & (1 +1 <= sz_tracks) & ((sz_airplanes) : ((NAT-{0}))) & (1 +1 <= sz_airplanes) & ((plane_dummy) : (AIRPLANE));
btrue;
"Refinement is correct";
"Check invariant ((pointer$1) : (((0) .. (sz_airplanes))))";
((0) : (((0) .. (sz_airplanes))));
"Check invariant ((airplanes_i$1) : (((((0) .. (sz_airplanes))) --> (AIRPLANE))))";
(((((0) .. (sz_airplanes)) * ({plane_dummy}))) : (((((0) .. (sz_airplanes))) --> (AIRPLANE))));
"Check invariant ((((((0) .. ((pointer$1 - 1)))) <| (airplanes_i$1))) : (((((0) .. ((pointer$1 - 1)))) >-> (AIRPLANE))))";
((((((0) .. ((0 - 1)))) <| ((((0) .. (sz_airplanes)) * ({plane_dummy}))))) : (((((0) .. ((0 - 1)))) >-> (AIRPLANE))));
"Check invariant ((ran(((((0) .. ((pointer$1 - 1)))) <| (airplanes_i$1)))) = (ran(airplanes)))";
((ran(((((0) .. ((0 - 1)))) <| ((((0) .. (sz_airplanes)) * ({plane_dummy})))))) = (ran({})));
airplanes : ((0) .. (sz_airplanes)) +-> AIRPLANE & airplanes~ : AIRPLANE +-> ((0) .. (sz_airplanes)) & ((airplanes) : (((((0) .. (sz_airplanes))) >+> (AIRPLANE))));
((pointer$1) : (((0) .. (sz_airplanes)))) & airplanes_i$1 : ((0) .. (sz_airplanes)) +-> AIRPLANE & dom(airplanes_i$1) = ((0) .. (sz_airplanes)) & ((airplanes_i$1) : (((((0) .. (sz_airplanes))) --> (AIRPLANE)))) & ((((0) .. ((pointer$1 - 1)))) <| (airplanes_i$1)) : ((0) .. ((pointer$1 - 1))) +-> AIRPLANE & ((((0) .. ((pointer$1 - 1)))) <| (airplanes_i$1)) : ((0) .. ((pointer$1 - 1))) --> AIRPLANE & ((((0) .. ((pointer$1 - 1)))) <| (airplanes_i$1))~ : AIRPLANE +-> ((0) .. ((pointer$1 - 1))) & ((((((0) .. ((pointer$1 - 1)))) <| (airplanes_i$1))) : (((((0) .. ((pointer$1 - 1)))) >-> (AIRPLANE)))) & ((ran(((((0) .. ((pointer$1 - 1)))) <| (airplanes_i$1)))) = (ran(airplanes)));
((aa) : (AIRPLANE)) & not(aa = plane_dummy) & not(aa : ran(airplanes));
((ii$1) : (((0) .. (pointer$1))));
(((bb$1) = (TRUE))  => #(xx).(((xx) : (((0) .. ((ii$1 - 1))))) & (((airplanes_i$1 )(xx)) = (aa))));
(#(xx).(((xx) : (((0) .. ((ii$1 - 1))))) & (((airplanes_i$1 )(xx)) = (aa))) => ((bb$1) = (TRUE)));
(((airplanes_i$1 )(ii$1)) = (aa));
not((((airplanes_i$1 )(ii$1)) = (aa)));
(ii$1 +1 <= pointer$1);
((bb$1) = (FALSE));
not(((bb$1) = (FALSE)));
not((ii$1 +1 <= pointer$1));
(pointer$1 +1 <= sz_airplanes);
not((pointer$1 +1 <= sz_airplanes));
((aa) : (AIRPLANE));
not(aa = plane_dummy);
not(aa : ran(airplanes));
"Loop initialisation";
"Check invariant ((ii) : (((0) .. (pointer$1))))";
((0) : (((0) .. (pointer$1))));
"Check invariant (((bb) = (TRUE))  => #(xx).(((xx) : (((0) .. ((ii - 1))))) & (((airplanes_i$1 )(xx)) = (aa)))) & (#(xx).(((xx) : (((0) .. ((ii - 1))))) & (((airplanes_i$1 )(xx)) = (aa))) => ((bb) = (TRUE)))";
(((FALSE) = (TRUE))  => #(xx).(((xx) : (((0) .. ((0 - 1))))) & (((airplanes_i$1 )(xx)) = (aa)))) & (#(xx).(((xx) : (((0) .. ((0 - 1))))) & (((airplanes_i$1 )(xx)) = (aa))) => ((FALSE) = (TRUE)));
"Loop variant is positive";
(0 <= (pointer$1 - ii$1));
"Loop invariant is preserved";
(((ii$1 + 1)) : (((0) .. (pointer$1))));
(((TRUE) = (TRUE))  => #(xx).(((xx) : (((0) .. (((ii$1 + 1) - 1))))) & (((airplanes_i$1 )(xx)) = (aa)))) & (#(xx).(((xx) : (((0) .. (((ii$1 + 1) - 1))))) & (((airplanes_i$1 )(xx)) = (aa))) => ((TRUE) = (TRUE)));
"Variant is decreasing";
((pointer$1 - (ii$1 + 1)) +1 <= (pointer$1 - ii$1));
(((bb$1) = (TRUE))  => #(xx).(((xx) : (((0) .. (((ii$1 + 1) - 1))))) & (((airplanes_i$1 )(xx)) = (aa)))) & (#(xx).(((xx) : (((0) .. (((ii$1 + 1) - 1))))) & (((airplanes_i$1 )(xx)) = (aa))) => ((bb$1) = (TRUE)));
"Instruction Well Definess";
((ii$1) : (dom(airplanes_i$1)));
"End of loop";
#(xx).(((xx) : (((0) .. (sz_airplanes)))) & not(xx : dom(airplanes)) & ((ran(((((0) .. (((pointer$1 + 1) - 1)))) <| (((airplanes_i$1) <+ (({((pointer$1) |-> (aa))}))))))) = (ran(((airplanes) <+ (({((xx) |-> (aa))})))))));
(((pointer$1 + 1)) : (((0) .. (sz_airplanes))));
((((airplanes_i$1) <+ (({((pointer$1) |-> (aa))})))) : (((((0) .. (sz_airplanes))) --> (AIRPLANE))));
((((((0) .. (((pointer$1 + 1) - 1)))) <| (((airplanes_i$1) <+ (({((pointer$1) |-> (aa))})))))) : (((((0) .. (((pointer$1 + 1) - 1)))) >-> (AIRPLANE))));
#(xx).(((xx) : (((0) .. (sz_airplanes)))) & not(xx : dom(airplanes)) & ((ran(((((0) .. ((pointer$1 - 1)))) <| (airplanes_i$1)))) = (ran(((airplanes) <+ (({((xx) |-> (aa))})))))));
((aa) : (AIRPLANE)) & not(aa = plane_dummy) & ((aa) : (ran(airplanes)));
((ii$1) : (NAT));
(((airplanes_i$2 )(ii$1)) = (aa));
not((((airplanes_i$2 )(ii$1)) = (aa)));
(ii$1 +1 <= pointer$2);
not((ii$1 +1 <= pointer$2));
(0 +1 <= pointer$1);
not((0 +1 <= pointer$1));
((aa) : (ran(airplanes)));
((0) : (NAT));
(((ii$1 + 1)) : (NAT));
(((pointer$2 - 1)) : (dom(airplanes_i$2)));
((ii$1) : (dom(airplanes_i$2)));
((pointer$2) : (((0) .. (sz_airplanes))));
((airplanes_i$2) : (((((0) .. (sz_airplanes))) --> (AIRPLANE))));
((((((0) .. ((pointer$2 - 1)))) <| (airplanes_i$2))) : (((((0) .. ((pointer$2 - 1)))) >-> (AIRPLANE))));
((ran(((((0) .. ((pointer$2 - 1)))) <| (airplanes_i$2)))) = (ran(((airplanes) |>> (({aa}))))));
((ran(((((0) .. ((pointer$1 - 1)))) <| (airplanes_i$1)))) = (ran(((airplanes) |>> (({aa}))))));
((aa) : (AIRPLANE)) & not(aa = plane_dummy) & ((bb) = (bb));
((bb$1) = (bb));
(((bb$2) = (TRUE))  => #(xx).(((xx) : (((0) .. ((ii$1 - 1))))) & (((airplanes_i$1 )(xx)) = (aa))));
(#(xx).(((xx) : (((0) .. ((ii$1 - 1))))) & (((airplanes_i$1 )(xx)) = (aa))) => ((bb$2) = (TRUE)));
not(((aa) : (ran(airplanes))));
"Check invariant (((bb$1) = (TRUE))  => #(xx).(((xx) : (((0) .. ((ii - 1))))) & (((airplanes_i$1 )(xx)) = (aa)))) & (#(xx).(((xx) : (((0) .. ((ii - 1))))) & (((airplanes_i$1 )(xx)) = (aa))) => ((bb$1) = (TRUE)))";
(((bb$2) = (TRUE))  => #(xx).(((xx) : (((0) .. (((ii$1 + 1) - 1))))) & (((airplanes_i$1 )(xx)) = (aa)))) & (#(xx).(((xx) : (((0) .. (((ii$1 + 1) - 1))))) & (((airplanes_i$1 )(xx)) = (aa))) => ((bb$2) = (TRUE)));
((bb$2) = (TRUE));
((bb$2) = (FALSE));
((((0) .. ((pointer$1 - 1)))) <| (airplanes_i$1)) : ((0) .. ((pointer$1 - 1))) +-> AIRPLANE;
((((0) .. ((pointer$1 - 1)))) <| (airplanes_i$1)) : ((0) .. ((pointer$1 - 1))) --> AIRPLANE;
((((0) .. ((pointer$1 - 1)))) <| (airplanes_i$1))~ : AIRPLANE +-> ((0) .. ((pointer$1 - 1)));
((((((0) .. ((pointer$1 - 1)))) <| (airplanes_i$1))) : (((((0) .. ((pointer$1 - 1)))) >-> (AIRPLANE))));
airplanes_i$1 : ((0) .. (sz_airplanes)) +-> AIRPLANE;
dom(airplanes_i$1) = ((0) .. (sz_airplanes));
((airplanes_i$1) : (((((0) .. (sz_airplanes))) --> (AIRPLANE))));
((pointer$1) : (((0) .. (sz_airplanes))));
((xx) : (((0) .. ((0 - 1)))));
(((FALSE) = (TRUE))  => #(xx).(((xx) : (((0) .. ((0 - 1))))) & (((airplanes_i$1 )(xx)) = (aa))));
(#(xx).(((xx) : (((0) .. ((0 - 1))))) & (((airplanes_i$1 )(xx)) = (aa))) => ((FALSE) = (TRUE)));
(((airplanes_i$1 )(0)) = (aa));
not((((airplanes_i$1 )(0)) = (aa)));
"Well definedness";
((xx) : (dom(airplanes_i$1)));
((airplanes_i$1) : (((dom(airplanes_i$1)) +-> (ran(airplanes_i$1)))));
((0) : (dom(airplanes_i$1)));
(((pointer$1 - 1)) : (dom(airplanes_i$1)));
((aa) : (AIRPLANE)) & not(aa = plane_dummy)
END
&
THEORY EnumerateX IS
OCCUPATION == {occupied,unoccupied};
STATUS == {out,flighting,alighting,parked,boarding,departing}
END
