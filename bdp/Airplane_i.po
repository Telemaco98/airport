THEORY ProofList IS
_f(1) & _f(2) & _f(13) & _f(14) & _f(16) & WellDefinedness_has_airplane.4,(_f(36) & _f(38) & _f(86) => _f(87));
_f(1) & _f(2) & _f(13) & _f(14) & _f(16) & WellDefinedness_has_airplane.3,(_f(36) & _f(38) & _f(86) => _f(55));
_f(1) & _f(2) & _f(13) & _f(14) & _f(16) & WellDefinedness_has_airplane.2,(_f(86) => _f(87));
_f(1) & _f(2) & _f(13) & _f(14) & _f(16) & WellDefinedness_has_airplane.1,(_f(86) => _f(55));
_f(1) & _f(2) & _f(13) & _f(14) & _f(56) & WellDefinedness_remove_on.2,(_f(86) => _f(87));
_f(1) & _f(2) & _f(13) & _f(14) & _f(56) & WellDefinedness_remove_on.1,(_f(86) => _f(64));
_f(1) & _f(2) & _f(13) & _f(14) & _f(26) & WellDefinedness_remove.6,(_f(36) & _f(38) & _f(84) & _f(86) => _f(87));
_f(1) & _f(2) & _f(13) & _f(14) & _f(26) & WellDefinedness_remove.5,(_f(36) & _f(38) & _f(84) & _f(86) => _f(64));
_f(1) & _f(2) & _f(13) & _f(14) & _f(26) & WellDefinedness_remove.4,(_f(36) & _f(38) & _f(86) => _f(87));
_f(1) & _f(2) & _f(13) & _f(14) & _f(26) & WellDefinedness_remove.3,(_f(36) & _f(38) & _f(86) => _f(55));
_f(1) & _f(2) & _f(13) & _f(14) & _f(26) & WellDefinedness_remove.2,(_f(86) => _f(87));
_f(1) & _f(2) & _f(13) & _f(14) & _f(26) & WellDefinedness_remove.1,(_f(86) => _f(55));
_f(1) & _f(2) & _f(13) & _f(14) & _f(66) & has_airplane.13,(_f(16) & _f(46) => _f(55));
_f(1) & _f(2) & _f(13) & _f(14) & _f(66) & has_airplane.12,(_f(16) & _f(27) & _f(28) & _f(71) & _f(70) & _f(49) => _f(74));
_f(1) & _f(2) & _f(13) & _f(14) & _f(66) & has_airplane.11,(_f(16) & _f(27) & _f(28) & _f(71) & _f(33) & _f(49) => _f(73));
_f(1) & _f(2) & _f(13) & _f(14) & _f(66) & has_airplane.10,(_f(16) & _f(27) & _f(28) & _f(69) & _f(46) => _f(72));
_f(1) & _f(2) & _f(13) & _f(14) & _f(66) & has_airplane.9,(_f(16) & _f(27) & _f(28) & _f(69) & _f(68) & _f(44) => _f(45));
_f(1) & _f(2) & _f(13) & _f(14) & _f(66) & has_airplane.8,(_f(16) & _f(27) & _f(28) & _f(69) & _f(68) & _f(41) & _f(37) => _f(43));
_f(1) & _f(2) & _f(13) & _f(14) & _f(66) & has_airplane.7,(_f(16) & _f(27) & _f(28) & _f(69) & _f(68) & _f(41) & _f(35) => _f(42));
_f(1) & _f(2) & _f(13) & _f(14) & _f(66) & has_airplane.6,(_f(16) & _f(27) & _f(28) & _f(69) & _f(67) & _f(44) => _f(45));
_f(1) & _f(2) & _f(13) & _f(14) & _f(66) & has_airplane.5,(_f(16) & _f(27) & _f(28) & _f(69) & _f(67) & _f(41) & _f(37) => _f(43));
_f(1) & _f(2) & _f(13) & _f(14) & _f(66) & has_airplane.4,(_f(16) & _f(27) & _f(28) & _f(69) & _f(67) & _f(41) & _f(35) => _f(42));
_f(1) & _f(2) & _f(13) & _f(14) & _f(66) & has_airplane.3,(_f(16) & _f(27) & _f(28) & _f(39) => _f(40));
_f(1) & _f(2) & _f(13) & _f(14) & _f(66) & has_airplane.2,(_f(16) & _f(34) & _f(37) => _f(38));
_f(1) & _f(2) & _f(13) & _f(14) & _f(66) & has_airplane.1,(_f(16) & _f(34) & _f(35) => _f(36));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove_on.6,(_f(57) & _f(58) & _f(46) => _f(64));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove_on.5,(_f(57) & _f(58) & _f(4) & _f(24) => _f(63));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove_on.4,(_f(57) & _f(58) & _f(4) & _f(11) => _f(62));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove_on.3,(_f(57) & _f(58) & _f(4) & _f(9) => _f(61));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove_on.2,(_f(57) & _f(58) & _f(4) & _f(7) => _f(60));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove_on.1,(_f(57) & _f(58) & _f(4) & _f(5) => _f(59));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.17,(_f(16) & _f(33) & _f(46) => _f(55));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.16,(_f(16) & _f(33) & _f(27) & _f(28) & _f(32) & _f(49) & _f(24) => _f(54));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.15,(_f(16) & _f(33) & _f(27) & _f(28) & _f(32) & _f(49) & _f(11) => _f(53));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.14,(_f(16) & _f(33) & _f(27) & _f(28) & _f(32) & _f(49) & _f(9) => _f(52));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.13,(_f(16) & _f(33) & _f(27) & _f(28) & _f(32) & _f(49) & _f(7) => _f(51));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.12,(_f(16) & _f(33) & _f(27) & _f(28) & _f(32) & _f(49) & _f(5) => _f(50));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.11,(_f(16) & _f(33) & _f(27) & _f(28) & _f(31) & _f(46) => _f(48));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.10,(_f(16) & _f(33) & _f(27) & _f(28) & _f(31) & _f(30) & _f(44) => _f(45));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.9,(_f(16) & _f(33) & _f(27) & _f(28) & _f(31) & _f(30) & _f(41) & _f(37) => _f(43));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.8,(_f(16) & _f(33) & _f(27) & _f(28) & _f(31) & _f(30) & _f(41) & _f(35) => _f(42));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.7,(_f(16) & _f(33) & _f(27) & _f(28) & _f(31) & _f(29) & _f(46) => _f(47));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.6,(_f(16) & _f(33) & _f(27) & _f(28) & _f(31) & _f(29) & _f(44) => _f(45));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.5,(_f(16) & _f(33) & _f(27) & _f(28) & _f(31) & _f(29) & _f(41) & _f(37) => _f(43));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.4,(_f(16) & _f(33) & _f(27) & _f(28) & _f(31) & _f(29) & _f(41) & _f(35) => _f(42));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.3,(_f(16) & _f(33) & _f(27) & _f(28) & _f(39) => _f(40));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.2,(_f(16) & _f(33) & _f(34) & _f(37) => _f(38));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & remove.1,(_f(16) & _f(33) & _f(34) & _f(35) => _f(36));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.5,(_f(16) & _f(17) & _f(18) & _f(19) & _f(4) & _f(24) => _f(25));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.4,(_f(16) & _f(17) & _f(18) & _f(19) & _f(4) & _f(11) => _f(23));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.3,(_f(16) & _f(17) & _f(18) & _f(19) & _f(4) & _f(9) => _f(22));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.2,(_f(16) & _f(17) & _f(18) & _f(19) & _f(4) & _f(7) => _f(21));
_f(1) & _f(2) & _f(13) & _f(14) & _f(3) & add_plane.1,(_f(16) & _f(17) & _f(18) & _f(19) & _f(4) & _f(5) => _f(20));
_f(1) & _f(2) & Initialisation.4,(_f(4) & _f(11) => _f(12));
_f(1) & _f(2) & Initialisation.3,(_f(4) & _f(9) => _f(10));
_f(1) & _f(2) & Initialisation.2,(_f(4) & _f(7) => _f(8));
_f(1) & _f(2) & Initialisation.1,(_f(4) & _f(5) => _f(6))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
AIRPLANE: FIN(INTEGER) & not(AIRPLANE = {}) & ((1..6)*{STATUS}): FIN(NATURAL*{STATUS}) & not(((1..6)*{STATUS}) = {}) & ((1..2)*{OCCUPATION}): FIN(NATURAL*{OCCUPATION}) & not(((1..2)*{OCCUPATION}) = {}) & ((sz_gates) : ((NAT-{0}))) & (1 +1 <= sz_gates) & ((sz_tracks) : ((NAT-{0}))) & (1 +1 <= sz_tracks) & ((sz_airplanes) : ((NAT-{0}))) & (1 +1 <= sz_airplanes) & ((gate) = (((0) .. (sz_gates)))) & ((track) = (((0) .. (sz_tracks)))) & ((plane_dummy) : (AIRPLANE));
btrue;
"Refinement is correct";
"Check invariant ((pointer_i$1) : (((0) .. (sz_airplanes))))";
((0) : (((0) .. (sz_airplanes))));
"Check invariant ((airplanes_i$1) : (((((0) .. (sz_airplanes))) --> (AIRPLANE))))";
(((((0) .. (sz_airplanes)) * ({plane_dummy}))) : (((((0) .. (sz_airplanes))) --> (AIRPLANE))));
"Check invariant ((ran(airplanes)) = (ran(((((0) .. ((pointer - 1)))) <| (airplanes_i$1)))))";
((ran((((0) .. (sz_airplanes)) * ({plane_dummy})))) = (ran(((((0) .. ((0 - 1)))) <| ((((0) .. (sz_airplanes)) * ({plane_dummy})))))));
"Check invariant ((((((0) .. ((pointer - 1)))) <| (airplanes_i$1))) : (((((0) .. ((pointer - 1)))) >-> (AIRPLANE))))";
((((((0) .. ((0 - 1)))) <| ((((0) .. (sz_airplanes)) * ({plane_dummy}))))) : (((((0) .. ((0 - 1)))) >-> (AIRPLANE))));
((pointer) : (((0) .. (sz_airplanes)))) & airplanes : ((0) .. (sz_airplanes)) +-> AIRPLANE & dom(airplanes) = ((0) .. (sz_airplanes)) & ((airplanes) : (((((0) .. (sz_airplanes))) --> (AIRPLANE)))) & ((((0) .. ((pointer - 1)))) <| (airplanes)) : ((0) .. ((pointer - 1))) +-> AIRPLANE & ((((0) .. ((pointer - 1)))) <| (airplanes)) : ((0) .. ((pointer - 1))) --> AIRPLANE & ((((0) .. ((pointer - 1)))) <| (airplanes))~ : AIRPLANE +-> ((0) .. ((pointer - 1))) & ((((((0) .. ((pointer - 1)))) <| (airplanes))) : (((((0) .. ((pointer - 1)))) >-> (AIRPLANE))));
((pointer_i$1) : (((0) .. (sz_airplanes)))) & airplanes_i$1 : ((0) .. (sz_airplanes)) +-> AIRPLANE & dom(airplanes_i$1) = ((0) .. (sz_airplanes)) & ((airplanes_i$1) : (((((0) .. (sz_airplanes))) --> (AIRPLANE)))) & ((ran(airplanes)) = (ran(((((0) .. ((pointer - 1)))) <| (airplanes_i$1))))) & ((((0) .. ((pointer - 1)))) <| (airplanes_i$1)) : ((0) .. ((pointer - 1))) +-> AIRPLANE & ((((0) .. ((pointer - 1)))) <| (airplanes_i$1)) : ((0) .. ((pointer - 1))) --> AIRPLANE & ((((0) .. ((pointer - 1)))) <| (airplanes_i$1))~ : AIRPLANE +-> ((0) .. ((pointer - 1))) & ((((((0) .. ((pointer - 1)))) <| (airplanes_i$1))) : (((((0) .. ((pointer - 1)))) >-> (AIRPLANE)))) & ((pointer_i$1) = (pointer));
((aa) : (AIRPLANE)) & not(aa = plane_dummy) & not(aa : ran(((((0) .. ((pointer - 1)))) <| (airplanes)))) & (pointer +1 <= sz_airplanes);
((aa) : (AIRPLANE));
not(aa = plane_dummy);
not(aa : ran(((((0) .. ((pointer - 1)))) <| (airplanes))));
(pointer +1 <= sz_airplanes);
(((pointer_i$1 + 1)) : (((0) .. (sz_airplanes))));
((((airplanes_i$1) <+ (({((pointer_i$1) |-> (aa))})))) : (((((0) .. (sz_airplanes))) --> (AIRPLANE))));
((ran(((airplanes) <+ (({((pointer) |-> (aa))}))))) = (ran(((((0) .. (((pointer + 1) - 1)))) <| (((airplanes_i$1) <+ (({((pointer_i$1) |-> (aa))}))))))));
((((((0) .. (((pointer + 1) - 1)))) <| (((airplanes_i$1) <+ (({((pointer_i$1) |-> (aa))})))))) : (((((0) .. (((pointer + 1) - 1)))) >-> (AIRPLANE))));
"Check invariant ((pointer_i$1) = (pointer))";
(((pointer_i$1 + 1)) = ((pointer + 1)));
((aa) : (AIRPLANE)) & ((aa) : (ran(((((0) .. ((pointer - 1)))) <| (airplanes)))));
((ii$1) : (NAT));
(ii$1 <= pointer_i$1);
((aa) = ((airplanes_i$2 )(ii$1)));
not(((aa) = ((airplanes_i$2 )(ii$1))));
(ii$1 +1 <= pointer_i$2);
not((ii$1 +1 <= pointer_i$2));
((aa) : (ran(((((0) .. ((pointer - 1)))) <| (airplanes)))));
"Loop initialisation";
"Check invariant ((ii) : (NAT))";
((0) : (NAT));
"Check invariant (ii <= nsz)";
(0 <= pointer_i$1);
"Loop variant is positive";
(0 <= (pointer_i$1 - ii$1));
"Loop invariant is preserved";
(((ii$1 + 1)) : (NAT));
((ii$1 + 1) <= pointer_i$1);
"Variant is decreasing";
((pointer_i$1 - (ii$1 + 1)) +1 <= (pointer_i$1 - ii$1));
"Instruction Well Definess";
(((pointer_i$2 - 1)) : (dom(airplanes_i$2)));
((ii$1) : (dom(airplanes_i$2)));
"End of loop";
((pointer_i$2) : (((0) .. (sz_airplanes))));
((airplanes_i$2) : (((((0) .. (sz_airplanes))) --> (AIRPLANE))));
((ran(((airplanes) <+ (({((((((((0) .. ((pointer - 1)))) <| (airplanes)))~ )(aa)) |-> ((airplanes )((pointer - 1))))}))))) = (ran(((((0) .. (((pointer - 1) - 1)))) <| (airplanes_i$2)))));
((((((0) .. (((pointer - 1) - 1)))) <| (airplanes_i$2))) : (((((0) .. (((pointer - 1) - 1)))) >-> (AIRPLANE))));
((pointer_i$2) = ((pointer - 1)));
((0) : (dom(airplanes_i$1)));
((pp) : (((0) .. ((pointer - 1))))) & (0 +1 <= pointer);
((pp) : (((0) .. ((pointer - 1)))));
(0 +1 <= pointer);
(((pointer_i$1 - 1)) : (((0) .. (sz_airplanes))));
((((airplanes_i$1) <+ (({((pp) |-> ((airplanes_i$1 )((pointer_i$1 - 1))))})))) : (((((0) .. (sz_airplanes))) --> (AIRPLANE))));
((ran(((airplanes) <+ (({((pp) |-> ((airplanes )((pointer - 1))))}))))) = (ran(((((0) .. (((pointer - 1) - 1)))) <| (((airplanes_i$1) <+ (({((pp) |-> ((airplanes_i$1 )((pointer_i$1 - 1))))}))))))));
((((((0) .. (((pointer - 1) - 1)))) <| (((airplanes_i$1) <+ (({((pp) |-> ((airplanes_i$1 )((pointer_i$1 - 1))))})))))) : (((((0) .. (((pointer - 1) - 1)))) >-> (AIRPLANE))));
(((pointer_i$1 - 1)) = ((pointer - 1)));
(((pointer_i$1 - 1)) : (dom(airplanes_i$1)));
((aa) : (AIRPLANE)) & ((bb) = (bb));
((bb$1) = (bb));
((aa) = ((airplanes_i$1 )(ii$1)));
not(((aa) = ((airplanes_i$1 )(ii$1))));
(ii$1 +1 <= pointer_i$1);
not(((aa) : (ran(((((0) .. ((pointer - 1)))) <| (airplanes))))));
not((ii$1 +1 <= pointer_i$1));
((ii$1) : (dom(airplanes_i$1)));
((bb$2) = (TRUE));
((bb$2) = (FALSE));
((((0) .. ((pointer - 1)))) <| (airplanes_i$1)) : ((0) .. ((pointer - 1))) +-> AIRPLANE;
((((0) .. ((pointer - 1)))) <| (airplanes_i$1)) : ((0) .. ((pointer - 1))) --> AIRPLANE;
((((0) .. ((pointer - 1)))) <| (airplanes_i$1))~ : AIRPLANE +-> ((0) .. ((pointer - 1)));
((((((0) .. ((pointer - 1)))) <| (airplanes_i$1))) : (((((0) .. ((pointer - 1)))) >-> (AIRPLANE))));
((ran(airplanes)) = (ran(((((0) .. ((pointer - 1)))) <| (airplanes_i$1)))));
airplanes_i$1 : ((0) .. (sz_airplanes)) +-> AIRPLANE;
dom(airplanes_i$1) = ((0) .. (sz_airplanes));
((airplanes_i$1) : (((((0) .. (sz_airplanes))) --> (AIRPLANE))));
((pointer_i$1) : (((0) .. (sz_airplanes))));
((aa) = ((airplanes_i$1 )(0)));
not(((aa) = ((airplanes_i$1 )(0))));
"Well definedness";
((airplanes_i$1) : (((dom(airplanes_i$1)) +-> (ran(airplanes_i$1)))))
END
&
THEORY EnumerateX IS
OCCUPATION == {occupied,unoccupied};
STATUS == {out,flighting,alighting,parked,boarding,departing}
END
