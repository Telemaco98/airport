THEORY ProofList IS
_f(1) & _f(2) & _f(9) & _f(10) & _f(18) & WellDefinedness_gate_belongs_to.2,(_f(37) => _f(38));
_f(1) & _f(2) & _f(9) & _f(10) & _f(18) & WellDefinedness_gate_belongs_to.1,(_f(37) => _f(30));
_f(1) & _f(2) & _f(9) & _f(10) & _f(13) & WellDefinedness_is_gate_occupied.2,(_f(37) => _f(38));
_f(1) & _f(2) & _f(9) & _f(10) & _f(13) & WellDefinedness_is_gate_occupied.1,(_f(37) => _f(30));
_f(1) & _f(2) & _f(9) & _f(10) & _f(32) & gate_belongs_to.2,(_f(13) & _f(19) & _f(29) => _f(30));
_f(1) & _f(2) & _f(9) & _f(10) & _f(32) & gate_belongs_to.1,(_f(13) & _f(19) & _f(4) => _f(33));
_f(1) & _f(2) & _f(9) & _f(10) & _f(23) & is_gate_occupied.3,(_f(13) & _f(29) => _f(30));
_f(1) & _f(2) & _f(9) & _f(10) & _f(23) & is_gate_occupied.2,(_f(13) & _f(26) & _f(15) & _f(4) => _f(28));
_f(1) & _f(2) & _f(9) & _f(10) & _f(23) & is_gate_occupied.1,(_f(13) & _f(25) & _f(24) & _f(4) => _f(27));
_f(1) & _f(2) & _f(9) & _f(10) & _f(3) & vacate_gate.2,(_f(13) & _f(19) & _f(4) & _f(7) => _f(21));
_f(1) & _f(2) & _f(9) & _f(10) & _f(3) & vacate_gate.1,(_f(13) & _f(19) & _f(4) & _f(5) => _f(20));
_f(1) & _f(2) & _f(9) & _f(10) & _f(3) & occupy_gate.2,(_f(12) & _f(13) & _f(14) & _f(15) & _f(4) & _f(7) => _f(17));
_f(1) & _f(2) & _f(9) & _f(10) & _f(3) & occupy_gate.1,(_f(12) & _f(13) & _f(14) & _f(15) & _f(4) & _f(5) => _f(16));
_f(1) & _f(2) & Initialisation.2,(_f(4) & _f(7) => _f(8));
_f(1) & _f(2) & Initialisation.1,(_f(4) & _f(5) => _f(6))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
AIRPLANE: FIN(INTEGER) & not(AIRPLANE = {}) & ((1..6)*{STATUS}): FIN(NATURAL*{STATUS}) & not(((1..6)*{STATUS}) = {}) & ((1..2)*{OCCUPATION}): FIN(NATURAL*{OCCUPATION}) & not(((1..2)*{OCCUPATION}) = {}) & ((sz_gates) : ((NAT-{0}))) & ((sz_tracks) : ((NAT-{0}))) & ((sz_airplanes) : ((NAT-{0}))) & ((gate) = (((0) .. (sz_gates)))) & ((track) = (((0) .. (sz_tracks)))) & ((plane_dummy) : (AIRPLANE));
btrue;
"Refinement is correct";
"Check invariant ((gates_i$1) : (((((0) .. (sz_gates))) --> (AIRPLANE))))";
(((((0) .. (sz_gates)) * ({plane_dummy}))) : (((((0) .. (sz_gates))) --> (AIRPLANE))));
"Check invariant ((gates_i$1) = (gates))";
(((((0) .. (sz_gates)) * ({plane_dummy}))) = ((gate * ({plane_dummy}))));
gates : gate +-> AIRPLANE & dom(gates) = gate & ((gates) : (((gate) --> (AIRPLANE))));
gates_i$1 : ((0) .. (sz_gates)) +-> AIRPLANE & dom(gates_i$1) = ((0) .. (sz_gates)) & ((gates_i$1) : (((((0) .. (sz_gates))) --> (AIRPLANE)))) & ((gates_i$1) = (gates));
((aa) : (AIRPLANE)) & ((gg) : (gate)) & not(aa : ran(gates)) & (((gates )(gg)) = (plane_dummy));
((aa) : (AIRPLANE));
((gg) : (gate));
not(aa : ran(gates));
(((gates )(gg)) = (plane_dummy));
((((gates_i$1) <+ (({((gg) |-> (aa))})))) : (((((0) .. (sz_gates))) --> (AIRPLANE))));
((((gates_i$1) <+ (({((gg) |-> (aa))})))) = (((gates) <+ (({((gg) |-> (aa))})))));
((gg) : (gate)) & not((gates )(gg) = plane_dummy);
not((gates )(gg) = plane_dummy);
((((gates_i$1) <+ (({((gg) |-> (plane_dummy))})))) : (((((0) .. (sz_gates))) --> (AIRPLANE))));
((((gates_i$1) <+ (({((gg) |-> (plane_dummy))})))) = (((gates) <+ (({((gg) |-> (plane_dummy))})))));
((gg) : (gate)) & ((bb) = (bb));
((bb$1) = (bb));
not((((gates )(gg)) = (plane_dummy)));
(((gates_i$1 )(gg)) = (plane_dummy));
not((((gates_i$1 )(gg)) = (plane_dummy)));
((FALSE) = (TRUE));
((TRUE) = (FALSE));
"Instruction Well Definess";
((gg) : (dom(gates_i$1)));
((gg) : (gate)) & not((gates )(gg) = plane_dummy) & ((aa) = (aa));
((aa$1) = (aa));
(((gates_i$1 )(gg)) = ((gates )(gg)));
gates_i$1 : ((0) .. (sz_gates)) +-> AIRPLANE;
dom(gates_i$1) = ((0) .. (sz_gates));
((gates_i$1) : (((((0) .. (sz_gates))) --> (AIRPLANE))));
"Well definedness";
((gates_i$1) : (((dom(gates_i$1)) +-> (ran(gates_i$1)))))
END
&
THEORY EnumerateX IS
OCCUPATION == {occupied,unoccupied};
STATUS == {out,flighting,alighting,parked,boarding,departing}
END
