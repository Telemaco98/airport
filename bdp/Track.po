THEORY ProofList IS
_f(1) & _f(2) & _f(8) & _f(12) & WellDefinedness_track_belongs_to.2,(_f(24) => _f(26));
_f(1) & _f(2) & _f(8) & _f(12) & WellDefinedness_track_belongs_to.1,(_f(24) => _f(25));
_f(1) & _f(2) & _f(8) & WellDefinedness_Precondition_track_belongs_to.2,(_f(15) & _f(24) => _f(26));
_f(1) & _f(2) & _f(8) & WellDefinedness_Precondition_track_belongs_to.1,(_f(15) & _f(24) => _f(25));
_f(1) & _f(2) & _f(8) & _f(15) & WellDefinedness_is_track_occupied.2,(_f(24) => _f(28));
_f(1) & _f(2) & _f(8) & _f(15) & WellDefinedness_is_track_occupied.1,(_f(24) => _f(27));
_f(1) & _f(2) & _f(8) & WellDefinedness_Precondition_vacate_track.2,(_f(15) & _f(24) => _f(26));
_f(1) & _f(2) & _f(8) & WellDefinedness_Precondition_vacate_track.1,(_f(15) & _f(24) => _f(25));
_f(1) & _f(2) & _f(8) & WellDefinedness_Precondition_occupy_track.2,(_f(23) & _f(15) & _f(22) & _f(24) => _f(26));
_f(1) & _f(2) & _f(8) & WellDefinedness_Precondition_occupy_track.1,(_f(23) & _f(15) & _f(22) & _f(24) => _f(25));
_f(1) & _f(2) & _f(8) & _f(12) & vacate_track.2,(_f(3) & _f(6) => _f(14));
_f(1) & _f(2) & _f(8) & _f(12) & vacate_track.1,(_f(3) & _f(4) => _f(13));
_f(1) & _f(2) & _f(8) & _f(9) & occupy_track.2,(_f(3) & _f(6) => _f(11));
_f(1) & _f(2) & _f(8) & _f(9) & occupy_track.1,(_f(3) & _f(4) => _f(10));
_f(1) & _f(2) & Initialisation.2,(_f(3) & _f(6) => _f(7));
_f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
AIRPLANE: FIN(INTEGER) & not(AIRPLANE = {}) & ((1..6)*{STATUS}): FIN(NATURAL*{STATUS}) & not(((1..6)*{STATUS}) = {}) & ((1..2)*{OCCUPATION}): FIN(NATURAL*{OCCUPATION}) & not(((1..2)*{OCCUPATION}) = {}) & ((sz_gates) : ((NAT-{0}))) & ((sz_tracks) : ((NAT-{0}))) & ((sz_airplanes) : ((NAT-{0}))) & ((gate) = (((0) .. (sz_gates)))) & ((track) = (((0) .. (sz_tracks)))) & ((plane_dummy) : (AIRPLANE));
"Invariant is preserved";
"Check invariant ((tracks) : (((track) --> (AIRPLANE))))";
(((track * ({plane_dummy}))) : (((track) --> (AIRPLANE))));
"Check invariant ((status_track) : (((track) --> (OCCUPATION))))";
(((track * ({(2|->OCCUPATION)}))) : (((track) --> (((1..2)*{OCCUPATION})))));
tracks : track +-> AIRPLANE & dom(tracks) = track & ((tracks) : (((track) --> (AIRPLANE)))) & status_track : track +-> ((1..2)*{OCCUPATION}) & dom(status_track) = track & ((status_track) : (((track) --> (((1..2)*{OCCUPATION})))));
((aa) : (AIRPLANE)) & ((tt) : (track)) & not(aa : ran(tracks)) & (((tracks )(tt)) = (plane_dummy));
((((tracks) <+ (({((tt) |-> (aa))})))) : (((track) --> (AIRPLANE))));
((((status_track) <+ (({((tt) |-> ((1|->OCCUPATION)))})))) : (((track) --> (((1..2)*{OCCUPATION})))));
((tt) : (track)) & not((tracks )(tt) = plane_dummy);
((((tracks) <+ (({((tt) |-> (plane_dummy))})))) : (((track) --> (AIRPLANE))));
((((status_track) <+ (({((tt) |-> ((2|->OCCUPATION)))})))) : (((track) --> (((1..2)*{OCCUPATION})))));
((tt) : (track));
(((status_track )(tt)) = ((2|->OCCUPATION)));
not((((status_track )(tt)) = ((2|->OCCUPATION))));
btrue;
tracks : track +-> AIRPLANE;
dom(tracks) = track;
((tracks) : (((track) --> (AIRPLANE))));
not(aa : ran(tracks));
((aa) : (AIRPLANE));
"Well definedness";
((tt) : (dom(tracks)));
((tracks) : (((dom(tracks)) +-> (ran(tracks)))));
((tt) : (dom(status_track)));
((status_track) : (((dom(status_track)) +-> (ran(status_track)))))
END
&
THEORY EnumerateX IS
OCCUPATION == {occupied,unoccupied};
STATUS == {out,flighting,alighting,parked,boarding,departing}
END
